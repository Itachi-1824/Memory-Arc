name: AI Issue Assistant

on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write
  contents: read

jobs:
  ai-assist:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || contains(github.event.issue.labels.*.name, 'needs-help')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Analyze Issue
        id: analyze
        run: |
          # Save issue details to files
          echo "${{ github.event.issue.title }}" > issue_title.txt
          echo "${{ github.event.issue.body }}" | head -c 128000 > issue_body.txt
          
          # Create prompt file
          cat > prompt.txt << 'PROMPTEOF'
          Analyze this issue for Memory-Arc (AI memory management system). Be helpful and concise.
          
          Title: 
          PROMPTEOF
          
          cat issue_title.txt >> prompt.txt
          
          cat >> prompt.txt << 'PROMPTEOF'
          
          Description:
          PROMPTEOF
          
          cat issue_body.txt >> prompt.txt
          
          cat >> prompt.txt << 'PROMPTEOF'
          
          Provide clear analysis:
          1. Type: bug/feature/question/docs
          2. Severity: low/medium/high/critical (with reason)
          3. Components: Which parts affected
          4. Labels: Suggest 2-3 GitHub labels
          5. Response: Helpful reply to user (be friendly)
          6. Root Cause: Technical analysis (for bugs)
          7. Implementation: Suggestions (for features)
          8. Action Items: What maintainers should do
          
          Be thorough but not overly verbose. Focus on being helpful.
          PROMPTEOF
          
          # Create JSON payload and make API call
          jq -n \
            --arg model "gemini" \
            --arg content "$(cat prompt.txt)" \
            '{
              model: $model,
              messages: [{role: "user", content: $content}],
              temperature: 0.4,
              max_tokens: 2000
            }' > payload.json
          
          curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d @payload.json | jq -r '.choices[0].message.content // "Analysis unavailable"' > response.txt
          
          echo "response<<EOFMARKER" >> $GITHUB_OUTPUT
          cat response.txt >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post AI Analysis
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const responseText = fs.readFileSync('response.txt', 'utf8');
            
            const response = `## ðŸ¤– AI Issue Analysis

            ${responseText}

            ---
            *Generated by AI (Gemini). A maintainer will review shortly.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: response
            });
