name: AI Issue Assistant

on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write
  contents: read

jobs:
  ai-assist:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || contains(github.event.issue.labels.*.name, 'needs-help')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Analyze Issue
        id: analyze
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Limit issue body to 2000 chars
          ISSUE_BODY_SAMPLE="${ISSUE_BODY:0:2000}"
          
          PROMPT="Analyze this issue for Memory-Arc Python project.

          Title: ${ISSUE_TITLE}

          Body:
          ${ISSUE_BODY_SAMPLE}

          Provide:
          1. Issue type (bug/feature/question/docs)
          2. Severity (low/medium/high/critical)
          3. Suggested labels
          4. Helpful response to user
          5. Action items for maintainers

          Be helpful and specific."

          RESPONSE=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d @- <<EOFCURL | jq -r '.choices[0].message.content // "Analysis unavailable"'
          {
            "model": "gemini",
            "messages": [{"role": "user", "content": $(echo "$PROMPT" | jq -Rs .)}],
            "temperature": 0.4,
            "max_tokens": 1500
          }
          EOFCURL
          )

          echo "response<<EOFMARKER" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post AI Analysis
        uses: actions/github-script@v6
        with:
          script: |
            const responseText = process.env.RESPONSE_TEXT;
            
            const response = `## ðŸ¤– AI Issue Analysis

            ${responseText}

            ---
            *This analysis was generated by AI. A maintainer will review shortly.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: response
            });
        env:
          RESPONSE_TEXT: ${{ steps.analyze.outputs.response }}
