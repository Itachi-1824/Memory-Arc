name: AI Issue Assistant

on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write
  contents: read

jobs:
  ai-assist:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || contains(github.event.issue.labels.*.name, 'needs-help')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Analyze Issue
        id: analyze
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Gemini 2.0 Flash can handle full issue body (up to 100k chars)
          ISSUE_BODY_FULL="${ISSUE_BODY:0:100000}"
          
          PROMPT="Analyze this issue for Memory-Arc - an intelligent memory management system for AI applications.

          Title: ${ISSUE_TITLE}

          Full Description:
          ${ISSUE_BODY_FULL}

          Provide comprehensive analysis:
          1. Issue type (bug/feature/enhancement/question/documentation)
          2. Severity level (low/medium/high/critical) with reasoning
          3. Affected components (core/adapters/infinite context/workflows/docs)
          4. Suggested labels for GitHub
          5. Detailed helpful response to the user
          6. Technical analysis and potential root cause (for bugs)
          7. Implementation suggestions (for features)
          8. Action items for maintainers with priority
          9. Related issues or dependencies to check

          Be thorough, helpful, and technically accurate."

          RESPONSE=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d @- <<EOFCURL | jq -r '.choices[0].message.content // "Analysis unavailable"'
          {
            "model": "gemini-2.0-flash-exp",
            "messages": [{"role": "user", "content": $(echo "$PROMPT" | jq -Rs .)}],
            "temperature": 0.4,
            "max_tokens": 3000
          }
          EOFCURL
          )

          echo "response<<EOFMARKER" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post AI Analysis
        uses: actions/github-script@v6
        with:
          script: |
            const responseText = process.env.RESPONSE_TEXT;
            
            const response = `## ðŸ¤– AI Issue Analysis

            ${responseText}

            ---
            *This analysis was generated by AI. A maintainer will review shortly.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: response
            });
        env:
          RESPONSE_TEXT: ${{ steps.analyze.outputs.response }}
