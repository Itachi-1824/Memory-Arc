name: Code Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy radon

      - name: Run linters
        id: lint
        continue-on-error: true
        run: |
          echo "=== Flake8 ===" > lint_output.txt
          flake8 . --count --statistics --max-line-length=100 >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== Black ===" >> lint_output.txt
          black --check . >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== isort ===" >> lint_output.txt
          isort --check-only . >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== Complexity ===" >> lint_output.txt
          radon cc . -a -nb >> lint_output.txt 2>&1 || true

      - name: AI Quality Analysis
        id: analysis
        run: |
          # Read lint output from file (safer than variables)
          LINT_OUTPUT=$(cat lint_output.txt | head -c 128000)
          
          # Create prompt file
          cat > prompt.txt <<'PROMPTEOF'
Code quality analysis for Memory-Arc. Be clear and actionable.

Linting Results:
PROMPTEOF
          
          echo "$LINT_OUTPUT" >> prompt.txt
          
          cat >> prompt.txt <<'PROMPTEOF'

Provide balanced quality report:
1. Quality Score: X/10 with reason
2. Critical Issues: Must-fix problems (security, logic errors)
3. High Priority: Style violations, complexity, type issues
4. Medium Priority: Minor improvements
5. Recommendations: Top 5 actionable fixes
6. Positives: What's done well

Be specific with line numbers but keep it concise. Focus on what matters.
PROMPTEOF

          # Create JSON payload
          jq -n \
            --arg model "gemini" \
            --arg content "$(cat prompt.txt)" \
            '{
              model: $model,
              messages: [{role: "user", content: $content}],
              temperature: 0.3,
              max_tokens: 2000
            }' > payload.json

          # Make API call
          curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d @payload.json | jq -r '.choices[0].message.content // "Analysis unavailable"' > analysis.txt

          # Save to output
          echo "analysis<<EOFMARKER" >> $GITHUB_OUTPUT
          cat analysis.txt >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post Quality Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const analysis = fs.readFileSync('analysis.txt', 'utf8');
            const lintOutput = fs.readFileSync('lint_output.txt', 'utf8');
            
            const report = `## üìä Code Quality Report

            ${analysis}

            <details>
            <summary>üîç Detailed Linting Output</summary>

            \`\`\`
            ${lintOutput.substring(0, 10000)}
            \`\`\`

            </details>

            ---
            *Generated by AI Code Quality Assistant (Gemini)*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
