name: Code Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy radon

      - name: Run linters
        id: lint
        continue-on-error: true
        run: |
          echo "=== Flake8 ===" > lint_output.txt
          flake8 . --count --statistics --max-line-length=100 >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== Black ===" >> lint_output.txt
          black --check . >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== isort ===" >> lint_output.txt
          isort --check-only . >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== Complexity ===" >> lint_output.txt
          radon cc . -a -nb >> lint_output.txt 2>&1 || true

      - name: Get lint results
        id: results
        run: |
          LINT_OUTPUT=$(cat lint_output.txt)
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI Quality Analysis
        id: analysis
        run: |
          LINT_OUTPUT="${{ steps.results.outputs.output }}"
          
          PROMPT="Analyze code quality for Memory-Arc Python project.

          Linting Results:
          ${LINT_OUTPUT:0:4000}

          Provide quality report:
          1. Overall Score (1-10)
          2. Critical issues
          3. Code style issues
          4. Recommendations

          Be specific and actionable."

          ANALYSIS=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d @- <<EOF | jq -r '.choices[0].message.content // "Analysis unavailable"'
          {
            "model": "gemini",
            "messages": [{"role": "user", "content": $(echo "$PROMPT" | jq -Rs .)}],
            "temperature": 0.3,
            "max_tokens": 2000
          }
          EOF
          )

          echo "analysis<<EOFMARKER" >> $GITHUB_OUTPUT
          echo "$ANALYSIS" >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post Quality Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const analysis = process.env.ANALYSIS;
            const lintOutput = process.env.LINT_OUTPUT;
            
            const report = `## üìä Code Quality Report

            ${analysis}

            <details>
            <summary>üîç Detailed Linting Output</summary>

            \`\`\`
            ${lintOutput}
            \`\`\`

            </details>

            ---
            *Generated by AI Code Quality Assistant*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
        env:
          ANALYSIS: ${{ steps.analysis.outputs.analysis }}
          LINT_OUTPUT: ${{ steps.results.outputs.output }}
