name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > pr_diff.txt

      - name: Get changed files
        id: files
        run: |
          git diff --name-only origin/${{ github.base_ref }}...HEAD | head -50 > changed_files.txt

      - name: AI Code Review
        id: review
        run: |
          DIFF_SIZE=$(wc -c < pr_diff.txt)
          CHUNK_SIZE=128000
          
          # If diff is small enough, process in one go
          if [ $DIFF_SIZE -le $CHUNK_SIZE ]; then
            cat > prompt.txt <<'PROMPTEOF'
Review this PR for Memory-Arc project. Be concise but thorough.

Changed files:
PROMPTEOF
            cat changed_files.txt >> prompt.txt
            
            cat >> prompt.txt <<'PROMPTEOF'

Full diff:
PROMPTEOF
            cat pr_diff.txt >> prompt.txt
            
            cat >> prompt.txt <<'PROMPTEOF'

Provide a balanced review (not too long, not too short):
1. Summary: What changed and why (2-3 sentences)
2. Quality Score: X/10 with brief reason
3. Key Issues: List critical problems only (if any)
4. Recommendations: Top 3 actionable improvements

Keep it simple, clear, and focused on what matters most.
PROMPTEOF

            jq -n \
              --arg model "gemini" \
              --arg content "$(cat prompt.txt)" \
              '{
                model: $model,
                messages: [{role: "user", content: $content}],
                temperature: 0.3,
                max_tokens: 1500
              }' > payload.json

            curl -s -X POST "https://text.pollinations.ai/openai" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
              -d @payload.json | jq -r '.choices[0].message.content // "Review unavailable"' > review.txt
          else
            # For large diffs, process in chunks with context passing
            echo "" > chunk_summaries.txt
            echo "" > previous_context.txt
            CHUNK_NUM=0
            
            # Split diff into chunks
            split -b $CHUNK_SIZE pr_diff.txt chunk_
            
            for chunk_file in chunk_*; do
              CHUNK_NUM=$((CHUNK_NUM + 1))
              
              cat > chunk_prompt.txt <<'PROMPTEOF'
Analyzing chunk of large PR for Memory-Arc. Be brief.

PROMPTEOF
              
              if [ -s previous_context.txt ]; then
                echo "Previous context:" >> chunk_prompt.txt
                cat previous_context.txt >> chunk_prompt.txt
                echo "" >> chunk_prompt.txt
              fi
              
              echo "Current chunk:" >> chunk_prompt.txt
              cat "$chunk_file" >> chunk_prompt.txt
              
              cat >> chunk_prompt.txt <<'PROMPTEOF'

List:
1. Main changes
2. Issues found
3. Connection to previous chunks

Keep it short - this feeds into final review.
PROMPTEOF

              jq -n \
                --arg model "gemini" \
                --arg content "$(cat chunk_prompt.txt)" \
                '{
                  model: $model,
                  messages: [{role: "user", content: $content}],
                  temperature: 0.3,
                  max_tokens: 800
                }' > chunk_payload.json

              CHUNK_SUMMARY=$(curl -s -X POST "https://text.pollinations.ai/openai" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
                -d @chunk_payload.json | jq -r '.choices[0].message.content // ""')
              
              echo "=== Chunk ${CHUNK_NUM} ===" >> chunk_summaries.txt
              echo "$CHUNK_SUMMARY" >> chunk_summaries.txt
              echo "" >> chunk_summaries.txt
              
              # Save context for next chunk
              echo "$CHUNK_SUMMARY" | head -c 800 > previous_context.txt
            done
            
            # Generate final review
            cat > final_prompt.txt <<'PROMPTEOF'
Create final PR review for Memory-Arc from chunk analyses. Be concise but complete.

Changed files:
PROMPTEOF
            cat changed_files.txt >> final_prompt.txt
            
            cat >> final_prompt.txt <<'PROMPTEOF'

Chunk analyses:
PROMPTEOF
            cat chunk_summaries.txt >> final_prompt.txt
            
            cat >> final_prompt.txt <<'PROMPTEOF'

Provide balanced final review:
1. Summary: Overall changes (2-3 sentences)
2. Quality Score: X/10 with reason
3. Critical Issues: Main problems found
4. Recommendations: Top 3-5 improvements

Be clear, specific, and actionable. Not too verbose.
PROMPTEOF

            jq -n \
              --arg model "gemini" \
              --arg content "$(cat final_prompt.txt)" \
              '{
                model: $model,
                messages: [{role: "user", content: $content}],
                temperature: 0.3,
                max_tokens: 2000
              }' > final_payload.json

            curl -s -X POST "https://text.pollinations.ai/openai" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
              -d @final_payload.json | jq -r '.choices[0].message.content // "Review unavailable"' > review.txt
          fi

          echo "review<<EOFMARKER" >> $GITHUB_OUTPUT
          cat review.txt >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post AI Review
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reviewText = fs.readFileSync('review.txt', 'utf8');
            
            const review = `## ðŸ¤– AI Code Review

            ${reviewText}

            ---
            *Generated by AI (Gemini). Use human judgment for final decisions.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
