name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: files
        run: |
          FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | head -20)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI Code Review
        id: review
        run: |
          FILES="${{ steps.files.outputs.files }}"
          DIFF="${{ steps.diff.outputs.diff }}"
          
          # Split diff into chunks of 3000 chars each
          CHUNK_SIZE=3000
          DIFF_LENGTH=${#DIFF}
          CHUNK_SUMMARIES=""
          
          # Process diff in chunks
          for ((i=0; i<DIFF_LENGTH; i+=CHUNK_SIZE)); do
            CHUNK="${DIFF:i:CHUNK_SIZE}"
            
            CHUNK_PROMPT="Analyze this code diff chunk for Memory-Arc. List key changes and concerns briefly."
            
            CHUNK_SUMMARY=$(curl -s -X POST "https://text.pollinations.ai/openai" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
              -d @- <<EOFCURL | jq -r '.choices[0].message.content // ""'
            {
              "model": "gemini",
              "messages": [{"role": "user", "content": $(echo "${CHUNK_PROMPT}\n\n${CHUNK}" | jq -Rs .)}],
              "temperature": 0.3,
              "max_tokens": 500
            }
            EOFCURL
            )
            
            CHUNK_SUMMARIES="${CHUNK_SUMMARIES}\n\n--- Chunk $((i/CHUNK_SIZE + 1)) ---\n${CHUNK_SUMMARY}"
          done
          
          # Generate final summary from all chunks
          FINAL_PROMPT="Based on these chunk analyses, provide final PR review:

          Changed files:
          ${FILES}

          Chunk analyses:
          ${CHUNK_SUMMARIES}

          Provide:
          1. Overall summary
          2. Code quality score (1-10)
          3. Key issues found
          4. Recommendations

          Be concise and actionable."

          REVIEW=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d @- <<EOFCURL | jq -r '.choices[0].message.content // "Review unavailable"'
          {
            "model": "gemini",
            "messages": [{"role": "user", "content": $(echo "$FINAL_PROMPT" | jq -Rs .)}],
            "temperature": 0.3,
            "max_tokens": 2000
          }
          EOFCURL
          )

          echo "review<<EOFMARKER" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOFMARKER" >> $GITHUB_OUTPUT

      - name: Post AI Review
        uses: actions/github-script@v6
        with:
          script: |
            const reviewText = process.env.REVIEW_TEXT;
            
            const review = `## ðŸ¤– AI Code Review

            ${reviewText}

            ---
            *This review was generated by AI. Please use human judgment for final decisions.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
        env:
          REVIEW_TEXT: ${{ steps.review.outputs.review }}
